// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

// Protobuf Java Version: 3.25.1
package com.blockchain.communication;

/**
 * Protobuf type {@code TwoPhaseCommitMessage}
 */
public final class TwoPhaseCommitMessage extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:TwoPhaseCommitMessage)
    TwoPhaseCommitMessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TwoPhaseCommitMessage.newBuilder() to construct.
  private TwoPhaseCommitMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TwoPhaseCommitMessage() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TwoPhaseCommitMessage();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.blockchain.communication.CommunicationProto.internal_static_TwoPhaseCommitMessage_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.blockchain.communication.CommunicationProto.internal_static_TwoPhaseCommitMessage_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.blockchain.communication.TwoPhaseCommitMessage.class, com.blockchain.communication.TwoPhaseCommitMessage.Builder.class);
  }

  private int msgCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object msg_;
  public enum MsgCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PREPARETX(1),
    COMMITTX(2),
    MSG_NOT_SET(0);
    private final int value;
    private MsgCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MsgCase valueOf(int value) {
      return forNumber(value);
    }

    public static MsgCase forNumber(int value) {
      switch (value) {
        case 1: return PREPARETX;
        case 2: return COMMITTX;
        case 0: return MSG_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MsgCase
  getMsgCase() {
    return MsgCase.forNumber(
        msgCase_);
  }

  public static final int PREPARETX_FIELD_NUMBER = 1;
  /**
   * <code>.PrepareTxProto prepareTx = 1;</code>
   * @return Whether the prepareTx field is set.
   */
  @java.lang.Override
  public boolean hasPrepareTx() {
    return msgCase_ == 1;
  }
  /**
   * <code>.PrepareTxProto prepareTx = 1;</code>
   * @return The prepareTx.
   */
  @java.lang.Override
  public com.blockchain.communication.PrepareTxProto getPrepareTx() {
    if (msgCase_ == 1) {
       return (com.blockchain.communication.PrepareTxProto) msg_;
    }
    return com.blockchain.communication.PrepareTxProto.getDefaultInstance();
  }
  /**
   * <code>.PrepareTxProto prepareTx = 1;</code>
   */
  @java.lang.Override
  public com.blockchain.communication.PrepareTxProtoOrBuilder getPrepareTxOrBuilder() {
    if (msgCase_ == 1) {
       return (com.blockchain.communication.PrepareTxProto) msg_;
    }
    return com.blockchain.communication.PrepareTxProto.getDefaultInstance();
  }

  public static final int COMMITTX_FIELD_NUMBER = 2;
  /**
   * <code>.CommitTxProto commitTx = 2;</code>
   * @return Whether the commitTx field is set.
   */
  @java.lang.Override
  public boolean hasCommitTx() {
    return msgCase_ == 2;
  }
  /**
   * <code>.CommitTxProto commitTx = 2;</code>
   * @return The commitTx.
   */
  @java.lang.Override
  public com.blockchain.communication.CommitTxProto getCommitTx() {
    if (msgCase_ == 2) {
       return (com.blockchain.communication.CommitTxProto) msg_;
    }
    return com.blockchain.communication.CommitTxProto.getDefaultInstance();
  }
  /**
   * <code>.CommitTxProto commitTx = 2;</code>
   */
  @java.lang.Override
  public com.blockchain.communication.CommitTxProtoOrBuilder getCommitTxOrBuilder() {
    if (msgCase_ == 2) {
       return (com.blockchain.communication.CommitTxProto) msg_;
    }
    return com.blockchain.communication.CommitTxProto.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (msgCase_ == 1) {
      output.writeMessage(1, (com.blockchain.communication.PrepareTxProto) msg_);
    }
    if (msgCase_ == 2) {
      output.writeMessage(2, (com.blockchain.communication.CommitTxProto) msg_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (msgCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.blockchain.communication.PrepareTxProto) msg_);
    }
    if (msgCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.blockchain.communication.CommitTxProto) msg_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.blockchain.communication.TwoPhaseCommitMessage)) {
      return super.equals(obj);
    }
    com.blockchain.communication.TwoPhaseCommitMessage other = (com.blockchain.communication.TwoPhaseCommitMessage) obj;

    if (!getMsgCase().equals(other.getMsgCase())) return false;
    switch (msgCase_) {
      case 1:
        if (!getPrepareTx()
            .equals(other.getPrepareTx())) return false;
        break;
      case 2:
        if (!getCommitTx()
            .equals(other.getCommitTx())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (msgCase_) {
      case 1:
        hash = (37 * hash) + PREPARETX_FIELD_NUMBER;
        hash = (53 * hash) + getPrepareTx().hashCode();
        break;
      case 2:
        hash = (37 * hash) + COMMITTX_FIELD_NUMBER;
        hash = (53 * hash) + getCommitTx().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.blockchain.communication.TwoPhaseCommitMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.blockchain.communication.TwoPhaseCommitMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.blockchain.communication.TwoPhaseCommitMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.blockchain.communication.TwoPhaseCommitMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code TwoPhaseCommitMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:TwoPhaseCommitMessage)
      com.blockchain.communication.TwoPhaseCommitMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.blockchain.communication.CommunicationProto.internal_static_TwoPhaseCommitMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.blockchain.communication.CommunicationProto.internal_static_TwoPhaseCommitMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.blockchain.communication.TwoPhaseCommitMessage.class, com.blockchain.communication.TwoPhaseCommitMessage.Builder.class);
    }

    // Construct using com.blockchain.communication.TwoPhaseCommitMessage.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (prepareTxBuilder_ != null) {
        prepareTxBuilder_.clear();
      }
      if (commitTxBuilder_ != null) {
        commitTxBuilder_.clear();
      }
      msgCase_ = 0;
      msg_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.blockchain.communication.CommunicationProto.internal_static_TwoPhaseCommitMessage_descriptor;
    }

    @java.lang.Override
    public com.blockchain.communication.TwoPhaseCommitMessage getDefaultInstanceForType() {
      return com.blockchain.communication.TwoPhaseCommitMessage.getDefaultInstance();
    }

    @java.lang.Override
    public com.blockchain.communication.TwoPhaseCommitMessage build() {
      com.blockchain.communication.TwoPhaseCommitMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.blockchain.communication.TwoPhaseCommitMessage buildPartial() {
      com.blockchain.communication.TwoPhaseCommitMessage result = new com.blockchain.communication.TwoPhaseCommitMessage(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.blockchain.communication.TwoPhaseCommitMessage result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.blockchain.communication.TwoPhaseCommitMessage result) {
      result.msgCase_ = msgCase_;
      result.msg_ = this.msg_;
      if (msgCase_ == 1 &&
          prepareTxBuilder_ != null) {
        result.msg_ = prepareTxBuilder_.build();
      }
      if (msgCase_ == 2 &&
          commitTxBuilder_ != null) {
        result.msg_ = commitTxBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.blockchain.communication.TwoPhaseCommitMessage) {
        return mergeFrom((com.blockchain.communication.TwoPhaseCommitMessage)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.blockchain.communication.TwoPhaseCommitMessage other) {
      if (other == com.blockchain.communication.TwoPhaseCommitMessage.getDefaultInstance()) return this;
      switch (other.getMsgCase()) {
        case PREPARETX: {
          mergePrepareTx(other.getPrepareTx());
          break;
        }
        case COMMITTX: {
          mergeCommitTx(other.getCommitTx());
          break;
        }
        case MSG_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getPrepareTxFieldBuilder().getBuilder(),
                  extensionRegistry);
              msgCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getCommitTxFieldBuilder().getBuilder(),
                  extensionRegistry);
              msgCase_ = 2;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int msgCase_ = 0;
    private java.lang.Object msg_;
    public MsgCase
        getMsgCase() {
      return MsgCase.forNumber(
          msgCase_);
    }

    public Builder clearMsg() {
      msgCase_ = 0;
      msg_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.blockchain.communication.PrepareTxProto, com.blockchain.communication.PrepareTxProto.Builder, com.blockchain.communication.PrepareTxProtoOrBuilder> prepareTxBuilder_;
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     * @return Whether the prepareTx field is set.
     */
    @java.lang.Override
    public boolean hasPrepareTx() {
      return msgCase_ == 1;
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     * @return The prepareTx.
     */
    @java.lang.Override
    public com.blockchain.communication.PrepareTxProto getPrepareTx() {
      if (prepareTxBuilder_ == null) {
        if (msgCase_ == 1) {
          return (com.blockchain.communication.PrepareTxProto) msg_;
        }
        return com.blockchain.communication.PrepareTxProto.getDefaultInstance();
      } else {
        if (msgCase_ == 1) {
          return prepareTxBuilder_.getMessage();
        }
        return com.blockchain.communication.PrepareTxProto.getDefaultInstance();
      }
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    public Builder setPrepareTx(com.blockchain.communication.PrepareTxProto value) {
      if (prepareTxBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        msg_ = value;
        onChanged();
      } else {
        prepareTxBuilder_.setMessage(value);
      }
      msgCase_ = 1;
      return this;
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    public Builder setPrepareTx(
        com.blockchain.communication.PrepareTxProto.Builder builderForValue) {
      if (prepareTxBuilder_ == null) {
        msg_ = builderForValue.build();
        onChanged();
      } else {
        prepareTxBuilder_.setMessage(builderForValue.build());
      }
      msgCase_ = 1;
      return this;
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    public Builder mergePrepareTx(com.blockchain.communication.PrepareTxProto value) {
      if (prepareTxBuilder_ == null) {
        if (msgCase_ == 1 &&
            msg_ != com.blockchain.communication.PrepareTxProto.getDefaultInstance()) {
          msg_ = com.blockchain.communication.PrepareTxProto.newBuilder((com.blockchain.communication.PrepareTxProto) msg_)
              .mergeFrom(value).buildPartial();
        } else {
          msg_ = value;
        }
        onChanged();
      } else {
        if (msgCase_ == 1) {
          prepareTxBuilder_.mergeFrom(value);
        } else {
          prepareTxBuilder_.setMessage(value);
        }
      }
      msgCase_ = 1;
      return this;
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    public Builder clearPrepareTx() {
      if (prepareTxBuilder_ == null) {
        if (msgCase_ == 1) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
      } else {
        if (msgCase_ == 1) {
          msgCase_ = 0;
          msg_ = null;
        }
        prepareTxBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    public com.blockchain.communication.PrepareTxProto.Builder getPrepareTxBuilder() {
      return getPrepareTxFieldBuilder().getBuilder();
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    @java.lang.Override
    public com.blockchain.communication.PrepareTxProtoOrBuilder getPrepareTxOrBuilder() {
      if ((msgCase_ == 1) && (prepareTxBuilder_ != null)) {
        return prepareTxBuilder_.getMessageOrBuilder();
      } else {
        if (msgCase_ == 1) {
          return (com.blockchain.communication.PrepareTxProto) msg_;
        }
        return com.blockchain.communication.PrepareTxProto.getDefaultInstance();
      }
    }
    /**
     * <code>.PrepareTxProto prepareTx = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.blockchain.communication.PrepareTxProto, com.blockchain.communication.PrepareTxProto.Builder, com.blockchain.communication.PrepareTxProtoOrBuilder> 
        getPrepareTxFieldBuilder() {
      if (prepareTxBuilder_ == null) {
        if (!(msgCase_ == 1)) {
          msg_ = com.blockchain.communication.PrepareTxProto.getDefaultInstance();
        }
        prepareTxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.blockchain.communication.PrepareTxProto, com.blockchain.communication.PrepareTxProto.Builder, com.blockchain.communication.PrepareTxProtoOrBuilder>(
                (com.blockchain.communication.PrepareTxProto) msg_,
                getParentForChildren(),
                isClean());
        msg_ = null;
      }
      msgCase_ = 1;
      onChanged();
      return prepareTxBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.blockchain.communication.CommitTxProto, com.blockchain.communication.CommitTxProto.Builder, com.blockchain.communication.CommitTxProtoOrBuilder> commitTxBuilder_;
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     * @return Whether the commitTx field is set.
     */
    @java.lang.Override
    public boolean hasCommitTx() {
      return msgCase_ == 2;
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     * @return The commitTx.
     */
    @java.lang.Override
    public com.blockchain.communication.CommitTxProto getCommitTx() {
      if (commitTxBuilder_ == null) {
        if (msgCase_ == 2) {
          return (com.blockchain.communication.CommitTxProto) msg_;
        }
        return com.blockchain.communication.CommitTxProto.getDefaultInstance();
      } else {
        if (msgCase_ == 2) {
          return commitTxBuilder_.getMessage();
        }
        return com.blockchain.communication.CommitTxProto.getDefaultInstance();
      }
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    public Builder setCommitTx(com.blockchain.communication.CommitTxProto value) {
      if (commitTxBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        msg_ = value;
        onChanged();
      } else {
        commitTxBuilder_.setMessage(value);
      }
      msgCase_ = 2;
      return this;
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    public Builder setCommitTx(
        com.blockchain.communication.CommitTxProto.Builder builderForValue) {
      if (commitTxBuilder_ == null) {
        msg_ = builderForValue.build();
        onChanged();
      } else {
        commitTxBuilder_.setMessage(builderForValue.build());
      }
      msgCase_ = 2;
      return this;
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    public Builder mergeCommitTx(com.blockchain.communication.CommitTxProto value) {
      if (commitTxBuilder_ == null) {
        if (msgCase_ == 2 &&
            msg_ != com.blockchain.communication.CommitTxProto.getDefaultInstance()) {
          msg_ = com.blockchain.communication.CommitTxProto.newBuilder((com.blockchain.communication.CommitTxProto) msg_)
              .mergeFrom(value).buildPartial();
        } else {
          msg_ = value;
        }
        onChanged();
      } else {
        if (msgCase_ == 2) {
          commitTxBuilder_.mergeFrom(value);
        } else {
          commitTxBuilder_.setMessage(value);
        }
      }
      msgCase_ = 2;
      return this;
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    public Builder clearCommitTx() {
      if (commitTxBuilder_ == null) {
        if (msgCase_ == 2) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
      } else {
        if (msgCase_ == 2) {
          msgCase_ = 0;
          msg_ = null;
        }
        commitTxBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    public com.blockchain.communication.CommitTxProto.Builder getCommitTxBuilder() {
      return getCommitTxFieldBuilder().getBuilder();
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    @java.lang.Override
    public com.blockchain.communication.CommitTxProtoOrBuilder getCommitTxOrBuilder() {
      if ((msgCase_ == 2) && (commitTxBuilder_ != null)) {
        return commitTxBuilder_.getMessageOrBuilder();
      } else {
        if (msgCase_ == 2) {
          return (com.blockchain.communication.CommitTxProto) msg_;
        }
        return com.blockchain.communication.CommitTxProto.getDefaultInstance();
      }
    }
    /**
     * <code>.CommitTxProto commitTx = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.blockchain.communication.CommitTxProto, com.blockchain.communication.CommitTxProto.Builder, com.blockchain.communication.CommitTxProtoOrBuilder> 
        getCommitTxFieldBuilder() {
      if (commitTxBuilder_ == null) {
        if (!(msgCase_ == 2)) {
          msg_ = com.blockchain.communication.CommitTxProto.getDefaultInstance();
        }
        commitTxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.blockchain.communication.CommitTxProto, com.blockchain.communication.CommitTxProto.Builder, com.blockchain.communication.CommitTxProtoOrBuilder>(
                (com.blockchain.communication.CommitTxProto) msg_,
                getParentForChildren(),
                isClean());
        msg_ = null;
      }
      msgCase_ = 2;
      onChanged();
      return commitTxBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:TwoPhaseCommitMessage)
  }

  // @@protoc_insertion_point(class_scope:TwoPhaseCommitMessage)
  private static final com.blockchain.communication.TwoPhaseCommitMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.blockchain.communication.TwoPhaseCommitMessage();
  }

  public static com.blockchain.communication.TwoPhaseCommitMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TwoPhaseCommitMessage>
      PARSER = new com.google.protobuf.AbstractParser<TwoPhaseCommitMessage>() {
    @java.lang.Override
    public TwoPhaseCommitMessage parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TwoPhaseCommitMessage> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TwoPhaseCommitMessage> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.blockchain.communication.TwoPhaseCommitMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

